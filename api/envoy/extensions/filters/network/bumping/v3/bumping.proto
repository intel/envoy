syntax = "proto3";

package envoy.extensions.filters.network.bumping.v3;

import "envoy/config/accesslog/v3/accesslog.proto";
import "envoy/extensions/transport_sockets/tls/v3/common.proto";

import "google/protobuf/wrappers.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.network.bumping.v3";
option java_outer_classname = "BumpingProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/bumping/v3;bumpingv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Bumping]
// Bumping :ref:`configuration overview <config_network_filters_bumping>`.
// [#extension: envoy.filters.network.bumping]

// [#next-free-field: 6]
message Bumping {
  // The prefix to use when emitting :ref:`statistics
  // <config_network_filters_bumping_stats>`.
  string stat_prefix = 1 [(validate.rules).string = {min_len: 1}];

  // The upstream cluster to connect to.
  string cluster = 2;

  // Configuration for :ref:`access logs <arch_overview_access_logs>`
  // emitted by the this bumping filter.
  repeated config.accesslog.v3.AccessLog access_log = 3;

  // The maximum number of unsuccessful connection attempts that will be made before
  // giving up. If the parameter is not specified, 1 connection attempt will be made.
  google.protobuf.UInt32Value max_connect_attempts = 4 [(validate.rules).uint32 = {gte: 1}];

  // Certificate provider instance for fetching TLS certificates.
  transport_sockets.tls.v3.CertificateProviderPluginInstance tls_certificate_provider_instance = 5;
}

